const express = require("express");
const router = express.Router();
const User = require("../models/User");
const Employer = require("../models/Employer");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");

// === SIGNUP ===
router.post("/signup", async (req, res) => {
  try {
    const { type, email, password, companyName, contactName } = req.body;
    if (!type || !email || !password) {
      return res.status(400).json({ error: "type, email and password required" });
    }

    const existing = await User.findOne({ email });
    if (existing) return res.json({ error: "Email already exists" });

    const hash = await bcrypt.hash(password, 10);
    const user = new User({
      email,
      passwordHash: hash, // ✅ always store as passwordHash
      role: type === "employer" ? "employer" : "worker",
    });
    await user.save();

    if (type === "employer") {
      await Employer.create({ userId: user._id, companyName, contactName });
    }

    const token = jwt.sign(
      { id: user._id, role: user.role, email: user.email },
      process.env.JWT_SECRET || "secret",
      { expiresIn: "30d" }
    );

    res.json({ ok: true, token, user: { id: user._id, email: user.email, role: user.role } });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "signup-failed" });
  }
});

// === LOGIN ===
router.post("/login", async (req, res) => {
  try {
    const { email, password } = req.body;
    if (!email || !password) {
      return res.status(400).json({ error: "type, email, password required" });
    }

    const user = await User.findOne({ email }).exec();
    if (!user) return res.status(401).json({ error: "Invalid credentials" });

    // ✅ accept either passwordHash or password (for older users)
    const hash = user.passwordHash || user.password;
    if (!hash) return res.status(400).json({ error: "user-missing-password-hash" });

    const ok = await bcrypt.compare(password, hash);
    if (!ok) return res.status(401).json({ error: "Invalid credentials" });

    const token = jwt.sign(
      { id: user._id, role: user.role, email: user.email },
      process.env.JWT_SECRET || "secret",
      { expiresIn: "30d" }
    );

    res.json({ ok: true, token, user: { id: user._id, email: user.email, role: user.role } });
  } catch (err) {
    console.error("login error:", err);
    res.status(500).json({ error: "login-failed" });
  }
});

module.exports = router;