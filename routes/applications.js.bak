/**
 * routes/applications.js
 * Provides:
 *   GET  /api/applications               -> list (optional filter ?jobId=...)
 *   GET  /api/applications/:id           -> fetch single application
 *   POST /api/applications               -> create application (expects body with jobId, coverLetter, expectedSalary)
 *
 * Uses Authorization header for identifying applicant (Bearer <token>).
 */

const express = require('express');
const router = express.Router();
const Application = require('../models/Application');
const User = require('../models/User'); // optional, for extra user info

// Helper to decode token if present (non-strict)
function decodeTokenFromHeader(authHeader) {
  if (!authHeader) return null;
  try { return require('jsonwebtoken').verify(authHeader.split(' ')[1], process.env.JWT_SECRET || 'secret'); }
  catch (e) { return null; }
}

// GET /api/applications?jobId=...
router.get('/', async (req, res) => {
  try {
    const q = {};
    if (req.query.jobId) q.jobId = req.query.jobId;
    if (req.query.applicantId) q.applicantId = req.query.applicantId;

    // pagination (optional)
    const page = Math.max(1, parseInt(req.query.page || '1'));
    const limit = Math.max(1, parseInt(req.query.limit || '50'));
    const skip = (page - 1) * limit;

    const total = await Application.countDocuments(q);
    const apps = await Application.find(q).sort({ createdAt: -1 }).skip(skip).limit(limit).lean();

    return res.json({ ok: true, total, page, limit, applications: apps });
  } catch (err) {
    console.error('GET /api/applications error', err);
    return res.status(500).json({ error: 'applications-list-failed' });
  }
});

// GET /api/applications/:id
router.get('/:id', async (req, res) => {
  try {
    const a = await Application.findById(req.params.id).lean();
    if (!a) return res.status(404).json({ error: 'application-not-found' });
    return res.json({ ok: true, application: a });
  } catch (err) {
    console.error('GET /api/applications/:id error', err);
    return res.status(500).json({ error: 'application-fetch-failed' });
  }
});

// POST /api/applications
// Body: { jobId, coverLetter?, expectedSalary? }
router.post('/', async (req, res) => {
  try {
    const auth = decodeTokenFromHeader(req.headers.authorization);
    if (!auth) return res.status(401).json({ error: 'auth-required' });

    const applicantId = auth.id || auth._id || auth.userId;
    if (!applicantId) return res.status(401).json({ error: 'auth-required' });

    const { jobId, coverLetter = '', expectedSalary = '' } = req.body || {};
    if (!jobId) return res.status(400).json({ error: 'jobId required' });

    // create application
    const obj = {
      jobId: jobId,
      applicantId: applicantId,
      applicantEmail: auth.email || '',
      coverLetter,
      expectedSalary,
      createdAt: new Date()
    };

    const saved = await Application.create(obj);
    return res.json({ ok: true, application: saved });
  } catch (err) {
    console.error('POST /api/applications error', err);
    return res.status(500).json({ error: 'application-create-failed' });
  }
});

module.exports = router;
